# Overview

---

- 코틀린의 타입 시스템은 가독성을 향상시키는데 도움이되는 솔루션을 제공
- 널이 될 수 있는 타입(nullable type)과 읽기 전용 컬렉션이 있다.

# 1. 널 가능성(nullablility)

---

- 널 가능성은 NullPointerException(NPE)를 피할 수 있게 해주는 시스템이다.
- 코틀린을 비롯한 최신 언어에서 null에 대한 접근을 컴파일 시점으로 옮기고 있다.

## 널이 될 수 있는 타입

- 코틀린과 자바의 가장 큰 차이는 코틀린 타입 시스템이 널이 될 수 있는 타입을 먕시적으로 지원한다는 점이다.
- null이 될 수 있는 타입은 프로퍼티나 변수에 null을 허용하게 만든다.

![](https://velog.velcdn.com/images/eastperson/post/54c73321-232a-40c8-81bb-83d5826bb09d/image.png)


- 어떤 타입이든 타입 뒤에 ?를 붙이면 그 타입의 변수나 프로퍼티에 null 참조를 저장할 수 있다는 뜻이다.
- 따라서 모든 타입은 기본적으로 널이 될 수 없는 타입이고 ?가 붙어야 null이 될 수 있다.
- 널이 될 수 있는 값을 널이 될 수 없는 타입의 변수에 대입할 수 없다.

```kotlin
val x: String? = null
var y: String = x
// ERROR: Type mismatch
```

- null이 될 수 있는 타입의 값으로 뭘 할 수 있을까? 가장 중요한 일은 null check를 해주는 것이다.

```kotlin
fun strLenSafe(s: String?) : Int = if (s != null) s.length else 0
```

- null 가능성을 다루기 위한 도구는 다양하다.

## 타입의 의미

- 자바의 타입 시스템은 null을 제대로 다루지 못한다.
- 로직을 짤 때 null이 안온다는 확신을 갖고 만들곤 하는데 그 확신이 틀렸을 경우 NPE가 발생한다.
- 자바에서는 `@Nullable`, `@NotNull`, `Optional` 등으로 null처리를 해줬지만 그렇게 효용성이 있진 못했다.
- 코틀린은 이런 문제에 대한 종합적인 해법을 제공한다. 예외를 발생시킬 수 있는 연산을 판단하거나 그런 연산을 아예 금지시킬 수 있다.
    - 널이 될 수 있는 타입이나 널이 될 수 없는 타입의 객체는 같다. 래퍼를 사용하지 않았다.
    - 모든 검사는 컴파일 시점에 수행된다.
    - **따라서 널이 될 수 있는 타입을 처리할 때 별도의 실행 시점 부가 비용이 들지 않는다.**

## 안전한 호출 연산자

- 가장 유용한 도구 중 하나가 안전한 호출 연산자인 `?.`이다.

![](https://velog.velcdn.com/images/eastperson/post/b18aa5a1-d130-4ac3-bb83-89bb92b3faed/image.png)


- `?.` 호출의 결과 타입은 `Nullable`이다.
- 객체 그래프에서 null이 될 수 있는 중간 객체가 여럿 있다면 한 식 안에서 안전한 호출을 연쇄해서 함께 사용하면 편할 때가 자주 있다.

```kotlin
class Employee(val name: String, val manager: Employee?)
fun managerName(employee: Employee) : String? = employee.manger?.name
```

## 엘비스 연산자: ?:

- null 대신 사용할 디폴트 값을 지정할 때 편리하게 사용할 수 있는 엘비스(elvis) 연산자 제공
    - 널 복합(null coalescing) 연산자라고도 한다.

![](https://velog.velcdn.com/images/eastperson/post/a3c09554-fba6-495e-9177-69deff25cb22/image.png)


- 객체가 `null`이 아닐 경우 좌항, `null`일 경우 우항을 결과로 한다.
- `?.` 호출연산자와 함께 사용해서 `null`일 경우를 대비한 값을 지정하는 경우도 많다.

```kotlin
class Address(val streetAddress: String, val city: String, val coutnry: String)
fun managerName(employee: Employee) : String? = employee.manger?.address?: "Unknown"
fun printManagerAddress() {
	val managerName= employee.manager?.address
		?: throw IllegalArgumentException("No Address")
	with (address) {
		println(streetAddress)
		println("${zipCode}, ${city}, ${country}")
	}
}
```

- with 함수를 사용했기 때문에 address를 반복하지 않아도 된다.

## 안전한 캐스트: as?

- 자바 타입 캐스트 처럼 as로 지정한 타입으로 바꿀 수 없으면 `ClassCastException`이 발생한다.
- `as`를 사용할 때마다 `is`를 통해 미리 `as`로 변환 가능한 타입인지 검사해볼 수 있다.
- 하지만 `as?` 연산자를 사용하면 어떤 값을 지정한 타입으로 캐스트하고 변환할 수 없는 경우 null을 반환한다.

![](https://velog.velcdn.com/images/eastperson/post/685b5ff1-7ed3-4be6-96f8-9d2602bb68ea/image.png)


- 엘비스 연산자를 같이 사용해주면 더욱 유용하게 사용할 수 있다.

```kotlin
fun Person.isSamePerson(o: Any?): Boolean {
	val otherPerson = o as? Person ?: return false
	
	return this.equals(o)
}
```

- 어떤 값이 널이 아니라는 사실을 알려주고 싶을 때가 있다.

## 널 아님 단언: !!

- 널 아님 단언(not-null assertion)은 nullable 타입의 값을 다룰 때 사용하는 가장 단순한 도구이다.
- 실제 null에 대해 !!를 적용하면 NPE가 발생한다.

![](https://velog.velcdn.com/images/eastperson/post/1f02ed7d-8c90-4c7f-8e85-eafa60c9a7f1/image.png)


- !!는 컴파일러에게 나는 값이 null이 아님을 알고 있으므로 예외가 발생해도 감수하겠다라고 말하는 것과 같다.
- !!는 약간 무례해 보인다. 소리지르는 것 같다. 코틀린 개발자가 최대한 사용을 자제해달라는 의미에서 못생긴 기호로 만들었다.
- !!를 널에 대해 사용해서 발생하는 예외의 스택트레이스에는 어떤 식에서 예외가 발생했는지 정보가 들어있지않다. 따라서 단언문을 사용할 떄는 한 줄에 쓰는 일을 피해라.

```kotlin
// 이런 식은 쓰지 말아라
person.company!!.address!!.country
```

## let 함수

- let 함수를 안전한 호출 연산자와 함께 사용하면 원하는 식을 평가해서 결과가 널인지 검사한 다음에 그 결과를 변수에 넣는 작업을 간단한 식을 사용해 한꺼번에 처리할 수 있다.
- 가장 흔한 용례는 nullable 값을 null이 아닌 값만 인자로 받는 함수에 넘기는 경우다.

![](https://velog.velcdn.com/images/eastperson/post/4bda09bc-b65e-4f63-abe1-9d47b50ed3e0/image.png)


- let 함수는 null이 아닌경우에만 호출되므로 람다안에서는 null이 될 수 없는 타입의 값을 사용할 수 있다.
- it을 사용하기 유용하다.

```kotlin
fun sendEmailTo(email: String) {
	println("Sending email to ${email})
}

var email: String? = "ep@email.com"
email?.let { sendEmailTo(it) }
```

- let을 중첩시켜서 처리하면 복잡해지므로 그런 경우에는 if문을 사용하는 것이 낫다.

## 나중에 초기화할 프로퍼티

- 객체 인스턴스를 일단 생성한 다음에 나중에 초기화하는 경우가 많다.
- 코틀린은 non-null 프로퍼티를 생성자안에서 초기화하지 않으면 다른 메서드 안에서 초기화할 수 없다.
- 코틀린은 일반적으로 생성자에서 모든 프로퍼티를 초기화해야 한다.
- 프로퍼티 타입이 널이 될 수 없는 타입이라면 null이 아닌 값으로 프로퍼티를 초기화해야 한다.
    - nullable한 타입을 사용할 수 밖에 없다.
    - nullanle 타입을 사용하면 모든 프로퍼티 접근에 널 검사를 넣거나 !! 연산자를 사용해야 한다.
    - 보기 안좋다.
- late-initialized 할 수 있도록 `lateinit`을 사용해준다.
    - lateinit 프로퍼티는 항상 var여야 한다.
    - val은 final 필드로 컴파일되어 반드시 생성자 안에서 초기화해줘야 한다.
    - 프로퍼티를 초기화하기 전에 접근하면 “lateinit property 프로퍼티이름 has not been initialized” 에러가 발생한다.
    

> lateinit은의존관계 주입(DI)로 프레임워크와 함께 사용하는 경우가 많다. 코틀린은 lateinit으로 설정된 프로퍼티와 접근 제어자가 똑같은 필드를 생성해준다. 어떤 프로퍼티가 public이라면 생성한 필드도 public이다.

## null이 될 수 있는 타입 확장

- nullable한 타입에 확장 함수를 정의하면 null 값을 다루는 강력한 도구로 활용할 수 있다.
- 어떤 메서드를 호출하기 전에 수신 객체 역할을 하는 변수가 null이 될 수 없다고 보장하는 대신 직접 변수에 대해 메서드를 호출해도 확장 함수인 메서드가 널을 처리해준다.
    - 이런 처리는 확장 함수에서만 가능하다.
    - 일반 멤버 호출은 객체 인스턴스를 통해 디스패치(dispatch)되므로 인스턴스가 널인지 여부를 검사하지 않는다.

> 객체의 동적 타입에 따라 적절한 메서드를 호출해주는 방식을 동적 디스패치라고 부른다. 반대로 컴파일러가 컴파일 시점에 어떤 메서드를 호출될지 결정해서 코드를 생성해주는 방식을 직접 디스패치라고 한다.

```kotlin
fun verifyUserInput(input: String?) {
    if (input.isNullOrBlank()) {
        println("Please fill in the required fields")
    }
}

fun main(args: Array) {
    verifyUserInput(" ")
    verifyUserInput(null)
}
```

- 이 경우 ?. 호출을 하지 않아도 된다.

```kotlin
fun String?.isNullOrBlank(): Boolean =
    this == null || this.isBlank()
```

- `null`이 될 수 있는 `String`의 확장이다.
- `this`는 스마트 캐스트가 적용된다.
- 자바에서는 `this`가 `null`이 될 수 없지만 코틀린에서는 `null`이 될 수 있다.
- `let`은 `?.` 호출을 하지 않으면 it이 null이 될 수 있다.

![](https://velog.velcdn.com/images/eastperson/post/a49a2a60-cf9a-45a1-a686-a8986ae30238/image.png)


> 직접 확장 함수를 작성한다면 확장 함수를 널이 될 수 있는 타입에 대해 정의할지 여부를 고민할 필요가 있다. 처음에는 널이 될 수 없는 타입에 대한 확장 함수를 정의하고 나중에 널이 될 수 있는 타입에 대해 그 함수를 호출했다는 사실을 깨닫게 되면 안에서 널을 처리해서 안전하게 널이 될 수 있는 타입에 대한 확장함수로 바꿀 수 있다.

## 타입 파라미터의 널 가능성

- 모든 타입 파라미터(Generic)는 기본적으로 널이 될 수 있다.
- 타입 파라미터 T를 클래스나 함수 안에서 타입 이름으로 사용하면 이름 끝에 물음표가 없더라도 T가 널이 될 수 있다.

```kotlin
fun <T> printHashCode(t: T) {
    println(t?.hashCode())
}

fun main(args: Array) {
    printHashCode(null)
}
```

- T에 ?가 붙지 않았지만 기본적으로 ?붙은 것 과 다르지 않다.
- T에 대해 추론할 수 있는 타입은 Any? 타입이다.
- 타입 파라미터가 null이 아님을 확실하게 하려면 타입 상한(upper bound)를 지정해야 한다.

```kotlin
fun <T: Any> printHashCode(t: T) {
  println(t.hashCode())
}

fun main(args: Array) {
  printHashCode(null)
}
```

- 이제 null이 될 수 없는 Generic 타입인 T로 선언되어 printHashCode(null) 코드는 컴파일 에러가 난다.

## 널 가능성과 자바

- 코틀린은 자바 상호 운용성을 자랑스럽게 강조한다.
- 자바와 코틀린을 조합하면 어떤 일이 생길까?
    - 자바 코드에도 애너테이션으로 표시된 널 가능성 정보가 있다. 이런 정보가 있으면 코틀린도 이 정보를 활용한다.

![](https://velog.velcdn.com/images/eastperson/post/36df2a41-2377-41ad-8c02-f076019d63bf/image.png)


- 코틀린은 여러 널 가능성 애너테이션을 알아본다.
    - JSR-305 표준(javax.annotation 패키지)
    - 안드로이드(android.support.annotation 패키지)
    - 젯브레인스(org.jetbrains.annotations 패키지)
- 널 가능성 애너테이션이 소스코드에 없는 경우에는 자바의 타입이 코틀린의 **플랫폼 타입(platform type)**이 된다.

### 플랫폼 타입

플랫폼 타입은 코틀린이 널 관련 정보를 알 수 없는 타입을 말한다. 그 타입을 널이 될 수 있는 타입으로 처리해도 되고 널이 될 수 없는 타입으로 처리해도 된다.

![](https://velog.velcdn.com/images/eastperson/post/b7d3a582-40b9-4366-883c-eac7bb67a5b4/image.png)

- 자바와 마찬가지로 플랫폼 타입에 대해 수행하는 모든 연산에 대한 책임은 개발자한테 있다는 뜻이다.
- 컴파일러는 모든 연산을 허용한다.
- 코틀린은 보통 널이 될 수 없는 타입의 값에 대해 널 안정성을 검사하는 연산을 수행하면 경고도 표시하지많 플랫폼 타입의 값에 대해 널 안전성 검사를 중복 수행해도 아무 경고도 표시하지 않는다.
- 어떤 플랫폼 타입의 값이 널이 될수도 있으믕ㄹ 알고 있다면 그 값을 사용하기 전에 널인지 검사할 수 있다. 널이 아님을 알고 있다면 아무 널 검사 없이 그 값을 직접 사용해도 된다.

```kotlin
// 자바
public class Person {
    private final String mName;
    public Person(String name) {
        mName = name;
    }

    public String getName() {
        return mName;
    }
}
```

- 위와 같은 자바클래스가 존재한다면 getName을 했을때 null 발생 소지가 있다.
- 코틀린에서 null체크 없이 사용하더라도 전혀 컴파일시 문제가 되지 않는다.
    - 단, 대부분의 자바 API는 널 관련 애너테이션을 쓰지 않는다.
    - 오류를 피하려면 널을 반환할지 알아내고 널을 반환하는 메서드에 대한 널 검사를 추가해야 한다.
- 다만 개발자의 판단에 의해서 아래와 같이 코딩해야만 Exception을 피할 수 있다.
- (단! 이런경우 NPE가 아닌 IllegalArgumentException이 발생 한다.)

```kotlin
fun yellAtSafe(person: Person) {
    println((person.name ?: "Anyone").toUpperCase() + "!!!")
}

fun main(args: Array) {
    yellAtSafe(Person(null))
}
```

- 왜 플랫폼 타입을 도입했을까?
- 모든 자바 타입을 nullable이라고 생각하면 어떨까?
    - 결코 널이 될 수 없는 값에도 불필요한 널 검사가 들어간다.
    - 특히 제네릭을 다룰 때 상황이 나빠진다.
    - ArrayList<String>을 Array<String?>?으로 다루면 원소에 접근할 떄마다 널 검사를 수행하거나 안전한 캐스트를 수행해야 한다.
    - 이런식으로 처리하면 널 안전성으로 얻는 이익보다 검사에 드는 비용이 훨씬 커진다.
    - 모든 타입에 대해 널 검사를 작성하는 것은 성가신 일이다.
    - 자바의 타입을 가져온 경우 코틀린 개발자에게 그 타입을 제대로 처리할 책임을 부여하는 방법을 채택한 것이다.
- `!`표기는 `Type!` 타입의 널 가능성에 대해 아무런 정보가 없다는 뜻이다.

### 상속

- 코틀린에서 자바 메서드를 오버라이드할 때 그 메서드의 파라미터와 반환 타입을 nullable, non-null로 선언할지 결정해야 한다.

```kotlin
//Java
interface StringProcessor{
    void process(String value);
}
```

```kotlin
//Kotlin
class StringPrinter : StringProcessor{
    override fun process(value: String){		// notnull 선언
        println(value)		
    }
}

class NullableStringPrinter : StringProcessor{
    override fun process(value: String?){		//nullable 선언
        value?.let{println(it)}
    }
}
```

# 2. 코틀린의 원시 타입

---

- 코틀린은 Int, Boolean, Any 등의 원시 타입과 래퍼 타입을 구분하지 않는다.

## 원시 타입: Int, Boolean 등

- 자바는 원시 타입과 참조 타입을 구분한다.
    - 원시 타입(primitive type)의 변수에는 그 값이 직접 들어간다.
        - 원시 타입의 값을 효율적으로 저장하고 여기저기 전달할 수 있다.
        - 메서드를 호출하거나 컬렉션에 담을 수 없다.
        - 래퍼 타입(Wrapper Type)을 사용한다.
    - 참조 타입(reference type)의 변수에는 메모리상의 객체 위치가 들어간다.
- 코틀린은 원시 타입과 래퍼타입을 구분하지 않는다.
    - 코틀린은 지네릭 클래스를 사용하는 경우를 제외하고는 가장 효율적인 방식으로 표현이 된다.
        - 기본 타입을 사용한다.
    - 자바 원시 타입을 코틀린에서 사용할 때는 null이 될 수 없는 타입으로 취급된다.

## 널이 될 수 있는 원시 타입: Int?, Boolean? 등

- null이 될 수 있는 코틀린 타입은 자바 원시 타입으로 표현할 수 없다.
    - 따라서 nullable 코틀린 코드가 자바에서 사용될 때 래퍼 타입으로 컴파일 된다.
- JVM은 타입 인자로 원시 타입을 허용하지 않는다.
    - 제네릭 클래스는 항상 박스타입을 사용해야 한다.
    - 원시타입으로 이뤄진 대규모 컬렉션을 효율적으로 저장하려면 trove4j 등의 효율적인 서드파티 라이브러리를 사용해야 한다.

## 숫자 변환

- 코틀린은 한 타입의 숫자를 다른 타입의 숫자로 자동 변환하지 않는다.
    - 결과 타입이 허용하는 숫자의 범위가 원래 타입의 범위보다 넓은 경우에도 자동 변환이 불가능하다.

```kotlin
val i = 1
val 1: Long = i // "Error: type mismatch" 컴파일 오류
```

```kotlin
val i = 1
val 1: Long = i.toLong()
```

- 코틀린은 모든 원시 타입(Boolean 제외)에 대한 변환 함수를 양뱡향으로 제공된다.
- 코틀린은 두 박스 간의 equals 메서드는 그 안에 들어있는 값이 아니라 박스 타입 객체를 비교한다.
    
    ```kotlin
    val x = 1
    val list = listOf(1L, 2L, 3L)
    x in list // 묵시적 타입으로 인해 false이다.
    ```
    

**원시 타입 리터럴**

- L 접미사가 붙은 Long 타입 리터럴: 123L
- 표준 부동소수점 표기법을 사용한 Double 타입 리터럴: 0.12, 2.0, 1.2e10, 1.2e-10
- f나 F 접미사가 붙은 Float 타입 리터럴: 123.4f, .456F, 1e3f
- 0x나 0X 접두사가 붙은 16진 리터럴: 0xCAFEBABE, 0xbcdL
- 0b나 0B 접두사가 붙은 2진 리터럴: 0b00000101
    
    
- 숫자 리터럴을 사용할 떄는 변환 함수를 호출할 필요가 없다.
- 산술 연산자가 적당한 타입의 값을 받아들일 수 있게 오버로드 되어있다.
    
    ```kotlin
    fun foo(l: Long) = println(l)
    
    // 상수 값은 적절한 타입으로 해석된다.
    val b: Byte = 1
    
    // +는 Byte와 Long을 인자로 받을 수 있다.
    val l = b + 1L
    
    // 컴파일러는 42를 Long 값으로 해석한다.
    foo(42)
    ```
    
- 코틀린 산술 연산자에도 숫자 연산시 overflow 발생할 수 있다.
- 코틀린은 overfow를 검사하는 추가 비용이 들이지 않는다.

## Any, Any?: 최상위 타입

- 자바에서의 Object 처럼 코틀린에서는 Any 타입이 모든 non-null 타입의 조상 타입이다.
    - 자바에서는 참조 타입만 Object를 정점으로 하는 타입 계층에 포함된다.
    - 코틀린에서는 Any가 Int 등의 원시 타입을 포함한 모든 타입의 조상타입이다.
- Any는 null이 될 수 없는 타입임에 유의해야 한다.
- 널이 포함하는 모든 값을 대입할 변수를 선언하려면 Any? 타입을 사용해야 한다.
- 내부에서 Any 타입은 자바의 Object에 대응한다.
    - 자바에서 Object를 인자로 받거나 반환하면 Any!(플랫폼 타입)로 대응한다.
    - toString, equals, hashCode 는 Any내에서 정의되어 있다.
    - wait, notify는 Any 사용할 수 없다. 사용하기 위해서는 java.lang.Object 타입으로 값을 캐스트해야 한다.

## Unit 타입: 코틀린의 void

- 자바의 void와 같은 기능을 한다.
- 반환 타입을 명시하지 않을 수 있다.

```kotlin
fun f(): Unit {}
// == fun f(): {}
```

- 코틀린 함수의 반환 타입이 Unit이고 그 함수가 제네릭 함수를 오버라이드하지 않는다면 내부에서 자바 void 함수로 컴파일 된다.
- void와 달리 Unit을 타입 인자로 사용할 수 있다. Unit 타입에 속한 값은 단 하나뿐이며 그 이름도 Unit이다.

```kotlin
interface Processor<T> {
	fun process(): T
}

class NoResultProcessor : Processor<Unit> {

	// Unit을 반환하지만 타입을 지정할 필요는 없다.
	override fun process() {
		// 업무 처리 코드
		// 여기서 return을 명시할 필요가 없다.
	}
}
```

- 타입 인자로 ‘값 없음'을 표현한다고 생각한다.
- 별도의 인터페이스를 사용해 값을 반환하는 경우와 값을 반환하지 않은 경우를 분리하는 방법이 있다.
    - 값을 반환하지 않는 경우는 java.lang.Void  타입을 명시한다.
    - 함수형 프로그래밍에서 전통적으로 Unit은 단 하나의 인스턴스만을 갖는 타입을 의미한다.

## Nothing 타입: 이 함수는 결코 정상적으로 끝나지 않는다.

- 결코 성공적으로 값을 돌려주는 일이 없어 ‘반환 값'이라는 개념 자체가 의미 없는 함수가 일부 존재한다.
- 정상적이지 않는 사실을 알려주는 함수이다.

```kotlin
fun fail(message: String): Nothing {
	throw IllegalStateException(message)
}
```

- Nothing 타입은 아무 값도 포함하지 않는다.
- Nothing은 함수의 반환 타입이나 반환 타입으로 쓰일 타입 파라미터로만 쓸 수 있다.
    - 그 외 다른 용도로 사용하는 경우 Nothing 타입의 변수를 선언하더라도 그 변수에 아무 값도 저장할 수 없으므로 아무 의미가 없다.
- Nothing을 반환하는 함수를 엘비스 연산자의 우항에 사용해서 전제 조건(precondition)을 검사할 수 있다.

```kotlin
val address = company.address ?: fail("No address")
println(address.city)
```

- 컴파일러는 address 값이 널이 아님을 추론할 수 있다.

# 3. 컬렉션과 배열

---

## 널 가능성과 컬렉션

- 변수 타입 뒤에 `?`을 붙이면 `null`을 저장할 수 있다.
- `List<Int?>`와 `List<Int?>?` 는 다르다.

## 읽기 전용과 변경 가능한 컬렉션

- 코틀린은 자바와 다르게 컬렉션 안의 데이터에 접근하는 인터페이스와 컬렉션 안의 데이터를 변경하는 인터페이스를 분리했다.
- `kotlin.collections.Collection` 인터페이스를 사용하면 컬렉션 안의 원소에 대해 이터레이션하고 컬렉션의 크기를 얻고 어떤 값이 컬렉션 안에 들어있는지 검사하고 데이터를 읽는 다른 연산을 수행할 수 있다.
- `kotlin.collections.MutableCollection` 인터페이스를 사용해서 컬렉션 데이터를 수정한다. 원소를  추가하거나 삭제하거나 지우는 메서드를 제공한다.

![](https://velog.velcdn.com/images/eastperson/post/0fdfbed3-5f2a-4ab1-9167-349877da37a6/image.png)


`MutableCollection`은 `Collection`을 확장하면서 컬렉션 내용을 변경하는 메서드를 제공한다.

- 항상 읽기 전용 인터페이스를 사용하는 것을 일반적인 규칙으로 삼아라. 컬렉션을 변경할 필요가 있을 때만 변경 가능한 버전을 사용해라.
    - `val`과 `var`구별과 마찬가지로 읽기 전용과 변경 가능 인터페이스를 구별하는 이유는 프로그램에서 데이터에 어떤 일이 벌어지는지를 쉽게 이해하기 위함이다.
    - 어떤 함수가 `MutableCollection`이 아닌 `Collection` 타입의 인자를 받는다면 그 함수는 컬렉션을 변경하지 않고 읽기만 한다. 반면 `MutableCollection` 을 인자로 받는다면 그 함수가 컬렉션의 데이터를 바꿀 것이라고 알 수 있다.
        - `MutableCollection`을 인자로 받는 함수에 전달할 때는 원본의 변경을 막기 위해 컬렉션을 복사하는 경우가 있는데 이런 패턴을 방어적 복사(defensive copy)라고 부른다.

```kotlin
fun <T> copyElements (source: Collection<T>, target: MutableCollection<T>) {
	// source 컬렉션의 모든 원소에 대해 루프를 돈다.
	for (item in source) {
		// 변경 가능한 target 컬렉션에 원소를 추가한다.
		target.add(item)
	}
}
```

- target에 해당하는 인자로 읽기 전용 컬렉션을 넘길 수 없다. 실제 그 값(컬렉션)이 변경 가능한 컬렉션인지 여부와 관계없이 선언된 타입이 읽기 전용이라면 컴파일 오류가 난다.
- 읽기 전용 컬렉션이라고해서 꼭 변경 불가능한 컬렉션일 필요는 없다. 같은 인스턴스를 가리키는 변경 가능한 인터페이스의 참조가 있을 수 있다.
- 어떤 동일한 컬렉션 객체를 가리키는 읽기 전용 컬렉션 타입의 참조와 변경 가능한 컬렉션 타입의 참조가 있는 경우 컬렉션을 참조하는 다른 코드를 호출하거나 병렬 실행한다면 컬렉션을 사용하는 도중에 다른 컬렉션이 그 컬렉션의 내용을 변경하는 상황이 생길 수 있다.
- 이런 상황에서 `ConcurrentModificationException`이나 다른 오류가 발생할 수 있다.
- 따라서 읽기 전용 컬렉션이 항상 스레드 안전(thread safe)하지는 않다는 점을 명시해야 한다.
- 다중 스레드 환경에서 데이터를 다루는 경우 그 데이터를 적절히 동기화하거나 동시 접근을 허용하는 데이터 구조를 활용해야 한다.

## 코틀린 컬렉션과 자바

- 모든 코틀린 컬렉션은 그에 상응하는 자바 컬렉션 인터페이스의 인스턴스이다.
- 코틀린과 자바를 오갈 때 변환이 필요 없고 래퍼 클래스를 만들거나 데이터를 복사할 필요가 없다.
- 모든 자바 컬렉션 인터페이스마다 읽기 전용 인터페이스와 변경 가능한 인터페이스라는 두 가지 표현(representation)을 제공ㅎ나다.

[](https://velog.velcdn.com/images/eastperson/post/dc117d69-8f2a-4a87-a496-6c7d3231e885/image.png)

코틀린 컬렉션 인터페이스의 계층 구조, 자바 클래스 `ArrayList`와 `HashSet`은 코틀린읜 변경 가능 인터페이스를 확장한다.

- 변경가능한 각 인터페이스는 자신과 대응하는 읽기 전용 인터페이스를 확장(상속)한다.
- `Map` 클래스(맵은 `Collection`이나 `Iterable`을 확장하지 않는다)도 코틀린에서 Map과 `MutableMap`이라는 두 가지 버전으로 나타난다.

| 컬렉션 타입 | 읽기 전용 타입 | 변경 가능 타입 |
| --- | --- | --- |
| List | listOf | mutableListOf, arrayListOf |
| Set | setOf | mutableSetOf, hashSetOf, linkedSetOf, sortedSetOf |
| Map | mapOf | mutableMapOf, hashMapOf, linkedMapOf, sortedMapOf |
- 자바는 읽기 전용 컬렉션과 변경 가능 컬렉션을 구분하지 않으므로 코틀린에서 읽기 전용 Collection으로 선언된 객체라도 내용을 변경할 수 있다.

## 컬렉션을 플랫폼 타입으로 다루기

- 플랫폼 타입의 경우 코틀린 쪽에는 널 관련 정보가 없다. 따라서 컴파일러는 코틀린 코드가 그 타입을 널이 될 수 있는 타입이나 널이 될 수 없는 타입 어느쪽으로든 사용할 수 있게 허용한다.
- 자바 쪽에서 선언한 컬렉션 타입의 변수도 플랫폼 타입으로 본다.
- 자바 컬렉션이 들어간 경우 어떤 코틀린이 들어가야할 지 정해야한다.
    - 컬렉션이 널이 될 수 있는가?
    - 컬렉션의 원소가 널이 될 수 있는가?
    - 오버라이드하는 메서드가 컬렉션을 변경할 수 있는가?

## 객체의 배열과 원시 타입의 배열

```kotlin
fun main(args: Array<String>) {
	// 배열의 인덱스 값의 범위에 대해 이터레이션하기 위해 array.indices 확장 함수를 사용
	for (i in args.indices) {
		// array[index]로 인덱스를 사용해 배열 원소에 접근
		println("Argument $i is: ${args[i]}")
	}
}
```

- 코틀린 배열은 타입 파라미터를 받는다. 원소 타입은 파라미터에 의해 정해진다.
    - 원소 타입을 추론해준다.

코틀린에서 배열을 만드는 방법

- `arrayOf` 함수에 원소를 넘기면 배열을 만들 수 있다.
- `arrayOfNulls` 함수에 정수 값을 인자로 넘기면 모든 원소가 `null`이고 인자로 넘긴 값과 크기가 같은 배열을 만들 수 있다. 물론 원소 타입이 널이 될 수 있는 타입인 경우에만 이 함수를 쓸 수 있다.
- `Array` 생성자는 배열 크기와 람다를 인자로 받아서 람다를 호출해서 각 배열 원소를 초기화해준다. `arrayOf`를 쓰지 않고 각 원소가 널이 아닌 배열을 만들어야 하는 경우 이 생성자를 사용한다.
- 코틀린은 원시 타입의 배열을 표현하는 별도 클래스를 원시 타입마다 하나씩 제공한다.
- `IntArray`, `ByteArray`, `CharArray`, `BooleanArray`는 `int[]`, `byte[]`, `char[]` 등으로 컴파일 된다.

원시 타입의 배열을 만드는 방법은 다음과 같다.

- 각 배열 타입의 생성자는 size 인자를 받아서 해당 원시 타입의 디폴트 값으로 초기화된 size 크기의 배열을 반환한다.
- 팩토리 함수는 여러 값을 가변 인자로 받아서 그 값이 들어간 배열을 반환한다.
- 크기와 람다를 인자로 받는 생성자를 사용한다.
    
    ```kotlin
    val squares = IntArray(5) { i -> (i+1) * (i+1) }
    println(squares.joinToString()) // 1, 4, 9, 16, 25
    ```
    

```kotlin
fun main(args: Array<String>) {
	args.forEachIndexed { index, element -> 
		println("Argument $index is: $element")
	}
}
```

# 4. 요약

- 코틀린은 널이 될 수 있는 타입을 지원해 `NullPointerException` 오류를 컴파일 시점에 감시할 수 있다.
- 코틀린의 안전한 호출(`?.`), 엘비스 연산자(`?:`), 널 아님 단언(`!!`), let 함수 등을 사용하면 널이 될 수 있는 타입을 간결한 코드로 다룰 수 있다.
- `as?` 연산자를 사용하면 값을 다른 타입으로 변환하는 것과 변환이 불가능한 경우를 처리하는 것을 한꺼번에 편리하게 처리할 수 있다.
- 자바에서 가져온 타입은 코틀린에서 플랫폼 타입으로 취급된다. 개발자는 플랫폼 타입을 널이 될 수 있는 타입으로도, 널이 될 수 없는 타입으로도 사용할 수 있다.
- 코틀린에서는 수를 표현하는 타입(`Int` 등)이 일반 클래스와 똑같이 생겼고 일반 클래스와 똑같이 동작한다. 하지만 대부분 컴파일러는 숫자 타입을 자바 원시 타입(`int` 등)으로 컴파일한다.
- 널이 될 수 있는 원시 타입(`Int?` 등)은 자바의 박싱한 원시 타입(`java.lang.Integer` 등)에 대응한다.
- `Any` 타입은 다른 모든 타입의 조상 타입이며 자바의 `Object`에 해당한다. `Unit`은 자바의 `void`와 비슷하다.
- 정상적으로 끝나지 않는 함수의 반환 타입을 지정할 때 `Nothing` 타입을 사용한다.
- 코틀린 컬렉션은 표준 자바 컬렉션 클래스를 사용한다. 하지만 코틀린은 자바보다 컬렉션을 더 개선해서 읽기 전용 컬렉션과 변경 가능한 컬렉션을 구별해 제공한다.
- 자바 클래스를 코틀린에서 확장하거나 자바 인터페이스를 코틀린에서 구현하는 경우 메서드 파라미터의 널 가능성과 변경 가능성에 대해 깊이 생각해야 한다.
- 코틀린의 `Array` 클래스는 일반 제네릭 클래스처럼 보인다. 하지만 `Array`는 자바 배열로 컴파일된다.
- 원시 타입의 배열은 `IntArray`와 같이 각 타입에 대한 특별한 배열로 표현된다.
